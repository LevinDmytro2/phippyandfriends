# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

parameters:
  - name: myString
    displayName: string
    type: string
    default: 'world'
    values:
    - world
    - mondo
  - name: myString22
    displayName: string22
    type: string
    default: 'world22'
    values:
    - world22
    - mondo22

pool:
  name: Default

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script ${{ parameters.myString }}'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
- task: TerraformInstaller@0
- task: TerraformCLI@0
  inputs:
    command: 'init'
    backendType: 'azurerm'
    backendServiceArm: 'Trial(1)(851f27db-441a-4eab-9a57-1b622fbe2d4f)'
    ensureBackend: true
    backendAzureRmResourceGroupName: 'terraform'
    backendAzureRmResourceGroupLocation: 'West Europe'
    backendAzureRmStorageAccountName: 'levin'
    backendAzureRmContainerName: 'states'
    backendAzureRmKey: 'test-env'
    allowTelemetryCollection: false
- task: TerraformCLI@0
  inputs:
    command: 'plan'
    environmentServiceName: 'Trial(851f27db-441a-4eab-9a57-1b622fbe2d4f)'
    runAzLogin: true
    commandOptions: '-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode'
    allowTelemetryCollection: true
    publishPlanResults: 'testingplan'
- task: TerraformCLI@0
  inputs:
    command: 'apply'
    environmentServiceName: 'Trial(1)(851f27db-441a-4eab-9a57-1b622fbe2d4f)'
    runAzLogin: true
    allowTelemetryCollection: false
